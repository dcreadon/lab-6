#include <stdio.h>
#include <math.h>
#define PI 3.141592653589

int read_line(double* g_x, double* g_y, double* g_z, int* t, int* Button_T, int* Button_C, int* Button_X, int* Button_S);

double roll(double x_mag);

double pitch(double y_mag);

int scaleRadsForScreen(double rad);

void print_chars(int num, char use); 



void graph_line(int number);

int main()
{
	double x, y, z;                             // magnitude values of x, y, and z
	int t, b_Triangle, b_X, b_Square, b_Circle;    // variables to hold the button statuses
	double roll_rad, pitch_rad;                 // value of the roll measured in radians
	int scaled_value;							// value of the roll adjusted to fit screen display

	//insert any beginning needed code here
	int rp = 0; 								//indicating roll or pitch, 1 is roll nd 0 is pitch
	
	do
	{
		read_line (&x, &y, &z, &t, &b_Triangle, &b_Circle, &b_X, &b_Square); 
		
		roll_rad = roll(x);
		pitch_rad = pitch(y);
		
		if (rp == 0 && b_Triangle) {
			rp = 1;
		}
		else if (rp == 1 && b_Triangle) {
			rp = 0;
		}
		if (rp == 1) {
			scaled_value = scaleRadsForScreen (roll_rad);				// these if statements are saying that it is roll then switches to pitch
		}
		else if (rp == 0) {
			scaled_value = scaleRadsForScreen (pitch_rad);
		}
		
		graph_line(scaled_value);
		
	fflush(stdout);
	} while (b_Square == 0);      // Modify to stop when the square button is pressed
	return 0; 
}

int read_line(double* g_x, double* g_y, double* g_z, int* t, int* Button_T,  int* Button_C, int* Button_X, int* Button_S) {
	scanf("%d, %lf, %lf, %lf, %d, %d, %d, %d", t, g_x, g_y, g_z, Button_T,  Button_X, Button_S, Button_C);
}
double roll(double x_mag) {
	if (x_mag < -1) {
	x_mag = -1;
	}
	else if (x_mag > 1) {
		x_mag = 1;
	}
	return (asin(x_mag));
}												// both of these functions are just saying that if the value is less than -1 it is -1 and
double pitch(double y_mag) {					//that if the value is greater than 1 it is 1
	if (y_mag < -1) {
		y_mag = -1;
	}
	else if (y_mag > 1) {
		y_mag = 1;
	}
	return (asin(y_mag));
}
int scaleRadsForScreen(double rad) {
	return rad * (78 / PI);				// this scales the roll and pitch to be able to fit onto the screen
}

void print_chars(int num, char use) {	//this function is indicating that a selected char will be printed a number of times
	int i;
	for (i = 0; i < num; i++) {
		printf("%c", use);
	}
}

void graph_line(int number) {		//this function uses print_chars to make a moving bar graph with the desired characters and limitations
int diff = 0;							// such limitations are 79 characters wide and a 0 in the middle

	if (number > 0){
		diff = 39 - number;
		print_chars (diff,  ' ');
		print_chars (number, 'l');		// this prints the letter l when the value is negative
}

	else if (number < 0) {
		print_chars (39,  ' ');
		print_chars (fabs(number), 'r');		// this prints the letter r when the value is positive
}
	else {
		print_chars (39,  ' ');			// this prints the extra spaces to be able to fill out the graph
		print_chars (1, '0');			// this is saying when the graph is in the middle 0 is output
}
		print_chars (1, '\n');			// this makes the new line for the graph
}
